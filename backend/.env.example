from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_DIR = BASE_DIR.parent

env = environ.Env()
env_file = ROOT_DIR / ".env"
if env_file.is_file():
    environ.Env.read_env(str(env_file))
del env_file

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

# URL do sistema frontend da combudata
FRONT_URL = env.str("FRONT_URL", "app.combudata.com")

# # # # # # # # # # # # # # # # # # # #
#  URLs da Combumarket
# # # # # # # # # # # # # # # # # # # #
# Base URL da API
COMBUMARKET_API_URL: str = env.str(
    "COMBUMARKET_API_URL",
    default="https://api.combumarket.com/",
).rstrip("/ ")
# Base URL do APP
COMBUMARKET_APP_URL: str = env.str(
    "COMBUMARKET_APP_URL",
    default="https://app.combumarket.com/",
).rstrip("/ ")

# Conexão com o DB da CM para o CDC
COMBUMARKET_DB_ENV_KEY = env(
    "COMBUMARKET_DB_ENV_KEY",
    default="HEROKU_POSTGRESQL_WHITE_URL",
)

# # # # # # # # # # # # # # # # # # # #
#  Configuração de JWE Token
# # # # # # # # # # # # # # # # # # # #
# Chave para criptografar os JWE Tokens
JWE_KEY = env.str("JWE_KEY", default="")
# Algoritmo usado para criptografar JWE Tokens
JWE_ALG = env.str("JWE_ALG", default="A256KW")
# Encoding usado para criptografar JWE Tokens
JWE_ENC = env.str("JWE_ENC", default="A256GCM")
# Algoritmo usado para criptografar JWS Tokens
JWS_ALG = env.str("JWS_ALG", default="HS256")

# # # # # # # # # # # # # # # # # # # #
#  Configura ALLOWED_HOSTS
# # # # # # # # # # # # # # # # # # # #
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])

# se for debug, libera localhost obrigatoriamente
if DEBUG:
    ALLOWED_HOSTS += ["localhost", "127.0.0.1", "[::1]"]

# Adiciona ALLOWED_HOST das variáveis de ambiente

# CORS
# ------------------------------------------------------------------------------
# https://pypi.org/project/django-cors-headers/
CORS_ALLOWED_ORIGINS = env.list(
    "CORS_ALLOWED_ORIGINS",
    default=[
        "http://app.combudata.com",
        "https://app.combudata.com",
    ],
)
# http://app.dev.combudata.com,https://app.dev.combudata.com
# http://combudata-dev.herokuapp.com,https://combudata-dev.herokuapp.com

# se for debug, libera localhost obrigatoriamente
if DEBUG:
    CORS_ALLOWED_ORIGINS += [
        "http://localhost:3000",
        "https://localhost:3000",
        "http://127.0.0.1:3000",
        "https://127.0.0.1:3000",
    ]

CORS_ALLOWED_ORIGIN_REGEXES = []
CORS_ALLOW_ALL_ORIGINS = False
# CORS_ALLOW_HEADERS = []
# CORS_ALLOW_METHODS = []
CORS_ALLOW_CREDENTIALS = True
CORS_URLS_REGEX = r"^/api/.*$"


# Application definition

DJANGO_APPS = [
    "scout_apm.django",  # deveria estar em THIRD_PARY_APPS mas tem que ficar em 1º
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
]
THIRD_PARTY_APPS = [
    "corsheaders",
    "django_filters",
    # "django.contrib.admindocs",
    "rest_framework",
    "drf_spectacular",
    "django_rest_passwordreset",
]
LOCAL_APPS = [
    "cidades",
    "combustiveis",
    "distribuidores",
    "empresas",
    "notas_fiscais",
    "produtos",
    "rdm",
    "usuarios",
    "cotacoes",
    "estoques",
    "tinymce",
    "utils",
    "backoffice",
]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Ativa Django Debug Toolbar se estiver no .env
DJANGO_DEBUG_TOOLBAR = env.bool("DJANGO_DEBUG_TOOLBAR", default=False)
if DJANGO_DEBUG_TOOLBAR:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.insert(0, "debug_toolbar.middleware.DebugToolbarMiddleware")
    INTERNAL_IPS = ["127.0.0.1"]


ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "utils/templates",
            "notas_fiscais/templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                # 'django.template.context_processors.debug',
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# DATABASES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": env.db("DATABASE_URL"),
}
DATABASES["default"]["CONN_MAX_AGE"] = 60
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# CACHES
# ------------------------------------------------------------------------------
CACHES = {"default": env.cache_url("CACHE_URL", default="dummycache://")}

# SESSION
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/3.1/ref/settings/#session-engine
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_SERIALIZER = "utils.ORJSONSessionSerializer"


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
AUTH_USER_MODEL = "usuarios.Usuario"
DEFAULT_USER_PROFILE_IMAGE = env.str("DEFAULT_USER_PROFILE_IMAGE")
# https://docs.djangoproject.com/en/dev/ref/settings/#login-redirect-url
LOGIN_REDIRECT_URL = "/"
# https://docs.djangoproject.com/en/dev/ref/settings/#login-url
LOGIN_URL = "login"


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "pt-br"
TIME_ZONE = "America/Sao_Paulo"
USE_I18N = True
USE_L10N = True
USE_TZ = True


# AWS
# ------------------------------------------------------------------------------
AWS_ENABLED = env.bool("AWS_ENABLED", default=bool(not DEBUG))

AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = env.str("AWS_S3_REGION_NAME", default="sa-east-1")
AWS_S3_URL_PROTOCOL = "https:"
AWS_S3_DEFAULT_CACHE_CONTROL = env.int("AWS_S3_DEFAULT_CACHE_CONTROL", default=86400)
AWS_S3_OBJECT_PARAMETERS = {"CacheControl": f"max-age={AWS_S3_DEFAULT_CACHE_CONTROL}"}
AWS_IS_GZIPPED = True
GZIP_CONTENT_TYPES = (
    "text/css",
    "text/javascript",
    "application/javascript",
    "application/x-javascript",
    "image/svg+xml",
    "application/xml",
)
# Possíveis valores
# (https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl):
# 'private', 'public-read', 'public-read-write', 'authenticated-read',
# 'aws-exec-read', 'bucket-owner-read', 'bucket-owner-full-control',
AWS_DEFAULT_ACL = "public-read"
AWS_LOCATION = "static"
AWS_PRELOAD_METADATA = True

# STATIC
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATIC_ROOT = str(ROOT_DIR / "static")
STATIC_URL = (
    f"{AWS_S3_URL_PROTOCOL}/{AWS_STORAGE_BUCKET_NAME}.s3-"
    f"{AWS_S3_REGION_NAME}.amazonaws.com/{AWS_LOCATION}/"
)

STATICFILES_STORAGE = "core.storages.StaticStorage"
DEFAULT_FILE_STORAGE = "core.storages.PublicMediaStorage"
PRIVATE_FILE_STORAGE = "core.storages.PrivateMediaStorage"

# Em desenvolvimento não usa a AWS para statics
if not AWS_ENABLED:  # pragma: no cover
    from django.conf.global_settings import (
        DEFAULT_FILE_STORAGE as _DEFAULT_FILE_STORAGE,
    )
    from django.conf.global_settings import STATICFILES_STORAGE as _STATICFILES_STORAGE

    STATIC_URL = "/static/"
    STATICFILES_STORAGE = _STATICFILES_STORAGE
    PRIVATE_FILE_STORAGE = DEFAULT_FILE_STORAGE = _DEFAULT_FILE_STORAGE

# MEDIA
# ------------------------------------------------------------------------------
MEDIA_ROOT = str(ROOT_DIR / "media")
AWS_MEDIA_LOCATION = "uploads"
MEDIA_URL = f"/{AWS_MEDIA_LOCATION}/"


# SECURITY
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/3.1/ref/settings/#session-cookie-httponly
SESSION_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/3.1/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_HTTPONLY = False
# https://docs.djangoproject.com/en/3.1/ref/settings/#secure-browser-xss-filter
SECURE_BROWSER_XSS_FILTER = False
# https://docs.djangoproject.com/en/3.1/ref/settings/#x-frame-options
X_FRAME_OPTIONS = "DENY"


# COOKIES
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=["app.combudata.com"])
CSRF_COOKIE_DOMAIN = env.str("COOKIE_DOMAIN", ".combudata.com")
SESSION_COOKIE_DOMAIN = CSRF_COOKIE_DOMAIN
SESSION_COOKIE_SAMESITE = env.str("SESSION_COOKIE_SAMESITE", "Lax")
CSRF_COOKIE_SAMESITE = SESSION_COOKIE_SAMESITE


# EMAIL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/3.1/ref/settings/#email-backend
EMAIL_CONFIG = env.email_url(
    "EMAIL_URL", default="consolemail://user:password@localhost:25"
)
vars().update(EMAIL_CONFIG)
EMAIL_SUBJECT_PREFIX = env.str("EMAIL_SUBJECT_PREFIX", default="[combudata-dev] ")

# https://docs.djangoproject.com/en/dev/ref/settings/#email-timeout
EMAIL_TIMEOUT = 5
DEFAULT_FROM_EMAIL = env.str("EMAIL_DEFAULT_FROM", default="nao-responda@combudata.com")

# Sentry
# ------------------------------------------------------------------------------
# Configura o Sentry SDK se houver variável de ambiente "SENTRY_DSN"
SENTRY_DSN = env("SENTRY_DSN", default="")
if SENTRY_DSN:  # pragma: no cover
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.redis import RedisIntegration
    from sentry_sdk.integrations.rq import RqIntegration

    # environment é case sensitive, então obriga a seguir um padrão
    sentry_env = env("SENTRY_ENVIRONMENT", default="production").title()

    # apenas 'production' e 'staging' são válidas, senão não usa environment
    if sentry_env not in ("Production", "Staging"):
        sentry_env = None

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        environment=sentry_env,
        integrations=[DjangoIntegration(), RqIntegration(), RedisIntegration()],
        send_default_pii=True,
        traces_sample_rate=0.2,
    )


# django-rest-framework
# -------------------------------------------------------------------------------
# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_RENDERER_CLASSES": (
        "drf_orjson_renderer.renderers.ORJSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
        "utils.renderers.XLSXRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": [
        "drf_orjson_renderer.parsers.ORJSONParser",
        "rest_framework.parsers.MultiPartParser",
    ],
    "DEFAULT_PAGINATION_CLASS": "utils.pagination.PaginacaoPadrao",
    "PAGE_SIZE": 100,
    "TEST_REQUEST_RENDERER_CLASSES": [
        "rest_framework.renderers.MultiPartRenderer",
        "drf_orjson_renderer.renderers.ORJSONRenderer",
    ],
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "EXCEPTION_HANDLER": "utils.exception_handler",
}

# API Documentation
# -------------------------------------------------------------------------------
# https://drf-spectacular.readthedocs.io/en/latest/settings.html
SPECTACULAR_SETTINGS = {
    "TITLE": "Combudata API",
    "DESCRIPTION": "Documentação da API da Combudata 2.0 para uso do Front End.",
    "TOS": False,
    "VERSION": "2.0.0",
}

# Test configuration
# -------------------------------------------------------------------------------
# https://github.com/xmlrunner/unittest-xml-reporting/tree/master/
TEST_RUNNER = "xmlrunner.extra.djangotestrunner.XMLTestRunner"
TEST_OUTPUT_DIR = "test-reports"  # o BitBucket Pipelines procura por esta pasta

# Temp admin permission
ESTOQUE_ALLOW_EDIT_ADMIN = env.bool("ESTOQUE_ALLOW_EDIT_ADMIN", default=False)

TICKETLOG_PRIVATE_KEY_B64 = env.str("TICKETLOG_PRIVATE_KEY_B64", default="")

# Logging
# -------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/3.1/ref/settings/#logging
# if DEBUG:
#     LOGGING = {
#         "version": 1,
#         "disable_existing_loggers": False,
#         "handlers": {
#             "console": {
#                 "class": "logging.StreamHandler",
#             },
#         },
#         "root": {
#             "handlers": ["console"],
#             "level": "WARNING",
#         },
#         "loggers": {
#             "django": {
#                 "handlers": ["console"],
#                 "level": env("DJANGO_LOG_LEVEL", default="INFO"),
#                 "propagate": False,
#             },
#             "django.db.backends": {
#                 "handlers": ["console"],
#                 "level": env("DJANGO_LOG_LEVEL", default="INFO"),
#             },
#         },
#     }
